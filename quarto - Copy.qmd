---
title: "BOUNDARY LINE ANALYSIS FOR YIELD GAP ANALYSIS"
format: html
editor: visual
---

## 1. Introduction

## 2. Load libraries

```{r, eval=FALSE}
library(BLA) 
library(aplpack)
```

## 3. Load data

## 4. Test Assumptions

### 4.1. Normality check for the soil P

When the censored bivariate normal model is used, the variables x and y should plausibly be drawn from an underlying bivariate normal distribution albeit with some censoring of the y variable. Here we check this assumption using the summastat() function.

#### 4.1.1. Soil P

```{r, eval=FALSE}

summastat(soil$P) # From results, P can not be assumed to be from a normal distribution and so we try a log transformation.

summastat(log(soil$P))# The log-transformed P can be assumed to be from a normal distribution
```

#### 4.1.2 Wheat yield

```{r,eval=FALSE}
summastat(soil$yield)# Wheat yield can be assumed to be from a normal distribution
```

### 4.2. Outlier detection using bagplot() function

The boundary line model is highly sensitive to outliers and for this reason, bivariate outliers are identified and removed from the data. This is achieved using the bagplot method. The `bag` plot is a bivariate equivalent of the univariate boxplot. It is composed of a `depth median`, `bag` and `loop`. The `depth median` describes the center of the data cloud and is equivalent to the median value in the univariate boxplot, the `bag` contains 50% of the data and the `loop` contains data outside the bag which are not outliers. Here we identify and remove outliers from the dataset using the `bagplot()` function from the `aplpack` package.

```{r, eval=FALSE}
dat <- data.frame(x=log(soil$P), y=soil$yield) #Input for the bagplot() is a dataframe of x and y.

out <- bagplot(dat,show.whiskers = F)# Figure 2 in article

legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"), pch = c(15,15,8,3), col = c(adjustcolor( "#7799ff", alpha.f = 0.7), "#aaccff","red","red")) #adds legend 
```

Creating a new data set without bivariate outliers i.e points in the bag and loop only.

```{r, eval=FALSE}
vals <- rbind(out$pxy.bag,out$pxy.outer)

head(vals)
```

### 4.3. Testing evidence for presence of boundary in dataset

Fitting boundary line models to data works on the assumption that data has boundary structure at the upper edges of the data. This assumption can be assessed using `expl_boundary()` function. The inputs are the x and y variables.

```{r,eval=FALSE}
x <- vals[,1] 
y <- vals[,2]

expl_boundary(x=x,y=y,shells=10,simulations=1000)
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise

</button>

::: {#my-collapse .collapse .mt-3}
1.  Reduce the number of simulations and see the effect
:::
:::

## 5. Boundary Model Fitting Methods

### 5.1 Bolides algorithm

This method fit the boundary line following the boundary line determination technique proposed by Schnug *et al.* (1995). To fit the boundary line using the BOLIDES algorithm , the `bolides()` function can be used. To check the required arguments for the function, the help page can be launched.

```{r, eval=FALSE}
?bolides
```

The arguments *`x`* and *`y`* are the independent and dependent variable respectively and `start` is a vector of starting values . The `model` argument is used to specify the model of the boundary line e.g. "blm" for the linear model. The `xmax` is an argument that describes the maximum value of the independent variable beyond which the relation of *`x`* and *`y`* is no longer theoretically feasible. Other arguments relate to the plot parameters as in the `plot()` function.

All boundary fitting methods require initial starting values for the parameters of a proposed model. The initial starting values are optimized to find the parameters of the proposed model as in the `optim()` function in base `R`.

To get the start starting values, the `bolides()` function is run with the argument `model="explore"`. This allows us to view the selected boundary points using the boundary line determination technique.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bolides(x=x,y=y,model = "explore", pch=16, col="grey")
```

From the plot, it can be seen that a "trapezium" model will be more appropriate for this data set. The function `startValues()` can be used to determine initial start values. For more information on `startValues()` function see `?startValues()`.

```{r, eval=FALSE}
?startValues()
```

With a scatter plot of *`y`* against *`x`* active in the plot window in `R`, run the function `startValues("trapezium")`, then use the mouse to click on the plot at five boundary points that follow the trapezium model in order of increasing *`x`* values.

```{r, eval=FALSE}

startValues("trapezium") # then select the five points at the edge of the dataset that make up the trapezium model in order of increasing x values.
```

The proposed start values will be produced. Note that this can be done for other models as well. Once all the arguments are set, the function can be run

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4,3,14,104,-22) # start values is a vector of five consists of intercept, slope, plateau yield, intercept2 and slope2. 

model3 <- bolides(x=x,y=x, start = start,model = "trapezium",
                xlab=expression("Phosphorus/ln(mg L"^-1*")"), 
                ylab=expression("Yield/ t ha"^-1), pch=16, 
                col="grey", bp_col="grey")

model2

```

The results show that the optimized parameters and plot of the fitted model. There is no uncertainty in the parameters because this is a heuristic method.

These parameters can then be used to determine boundary line response for any given value of *`x`*. Say you want to predict the maximum possible yield response at soil P values of 4.5, 7.4, 12.2, 20.1 and 54.5 mg/kg. Remember that our model was fitted on values of log soil P and therefore, these values must first be log transformed before the prediction is made. We can use the function `predictBL()` for this purpose. For more information on this function, see `?predictBL()` .

```{r, eval=FALSE}

P <- c(4.5, 7.4, 12.2, 20.1, 54.5)
P_log <- log(P)

Max_Response <- predictBL(model3, P_log) # the argument inputs are the boundary line model and the independent values (in this case P_log)

Max_Response
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 1

</button>

::: {#my-collapse .collapse .mt-3}
A link to dataset `maize` that contains cassava yields and various soil properties is provided below. You can read it into your R session using the following code.

```{r, eval=FALSE}
maize <- read.csv("https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/maize_data.csv")

head(maize)

```

1.  Fit the boundary line model for cassava yield and any soil property of your choice using the bolides function assigning it mod_1
:::

<!-- Unlock input + button -->

::: mt-3
<label for="keyInput">Enter key to view answer:</label> <input type="text" id="keyInput" class="form-control" placeholder="Enter keyword"> <button class="btn btn-success mt-2" onclick="checkKey()">Submit</button>
:::

<!-- Hidden answer section -->

::: {#answerContent .collapse .mt-3}
```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}
code_here
```

<!-- Hide button -->

<button class="btn btn-outline-secondary mt-2" onclick="hideAnswer()">

Hide Answer

</button>
:::

<!-- JavaScript -->

```{=html}
<script> function checkKey() { const input = document.getElementById('keyInput').value.trim().toLowerCase(); const answer = document.getElementById('answerContent'); if (input === 'model5') { answer.classList.add('show'); } else { alert('Incorrect key. Please try again.'); } } function hideAnswer() { const answer = document.getElementById('answerContent'); answer.classList.remove('show'); } </script>
```
:::

### 5.2 Binning method

The binning methodology involves splitting the data into several sections in the x-axis and selecting a boundary point in each section based on a set criteria (mostly the 95$^{\rm th}$ and 99$^{\rm th}$ percentile) (Shatar and McBratney, 2004). To fit the boundary line using the binning method, the `blbin()` function can be used. To check the required arguments for the function, the help page can be launched.

```{r, eval=FALSE}
?blbin
```

The arguments *`x`* and *`y`* are the independent and dependent variable respectively and `start` is a vector of starting values . The `model` argument is used to specify the model of the boundary line e.g. `model="blm"` for the linear model. The `bins` argument describes the size of the bins with a vector of length 3 containing the minimum and maximum independent variable values, and the size of bins to be used for the data respectively. We assume that the 99$^{\rm th}$ percentile (`tau=0.99`) is the boundary.

The initial start start values can be determined as previously shown in the previous section

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bins <- c(1.61,4.74,0.313) 

blbin(x=x,y=y, bins,model = "explore", tau=0.99, pch=16, col="grey")
```

From the plot, it can be seen that a "trapezium" model will be more appropriate for this data set.

```{r, eval=FALSE}
startValues("trapezium")
```

The values for `start` can now be obtained and the function can now be run.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4.75, 3.23, 13.3, 24.87,-2.95 )

model1 <- blbin(x=x,y=y, bins,start = start,model = "trapezium", 
              tau=0.99, 
              ylab=expression("t ha"^-1), 
              xlab=expression("Phosphorus/ln(mg L"^-1*")"), 
              pch=16, col="grey", bp_col="grey")

model1
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 2

</button>

::: {#my-collapse .collapse .mt-3}
A link to dataset `maize` that contains cassava yields and various soil properties is provided below. You can read it into your R session using the following code.

```{r, eval=FALSE}
cassava <- read.csv("https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/cassava.csv")

head(cassava)

```

1.  Fit the boundary line model for cassava yield and any soil property of your choice using the bolides function assigning it mod_1
:::

<!-- Unlock input + button -->

::: mt-3
<label for="keyInput">Enter key to view answer:</label> <input type="text" id="keyInput" class="form-control" placeholder="Enter keyword"> <button class="btn btn-success mt-2" onclick="checkKey()">Submit</button>
:::

<!-- Hidden answer section -->

::: {#answerContent .collapse .mt-3}
```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}
code_here
```

<!-- Hide button -->

<button class="btn btn-outline-secondary mt-2" onclick="hideAnswer()">

Hide Answer

</button>
:::

<!-- JavaScript -->

```{=html}
<script> function checkKey() { const input = document.getElementById('keyInput').value.trim().toLowerCase(); const answer = document.getElementById('answerContent'); if (input === 'model5') { answer.classList.add('show'); } else { alert('Incorrect key. Please try again.'); } } function hideAnswer() { const answer = document.getElementById('answerContent'); answer.classList.remove('show'); } </script>
```
:::

### 5.3 Quantile regression method

This method fits the boundary line using the principle of quantile regression (Cade and Noon, 2003). To fit the boundary line using the quantile regression method, the `blqr()` function can be used. To check the required arguments for the function, the help page can be launched.

```{r, eval=FALSE}
?blqr
```

The arguments *`x`* and *`y`* are the independent and dependent variable respectively and `start` is a vector of starting values . The `model` argument is used to specify the model of the boundary line e.g. "blm" for the linear model. The argument `tau` describes the quantile value described as boundary. We assume that the 99$^{\rm th}$ quantile (`tau=0.99`) value is the boundary. This is an arbitrary assumption, and for this reason we treat the method as heuristic.

The initial start start values can be determined as previously shown in the previous section. however, the `blqr()` function does not have the explore option and hence the `startValues()` function is used just on the plot of *`x`* and *`y`* directly according to the suggested model from the structure at the upper edge of the data. The trapezium model will be used for this data.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

plot(x,y)

startValues("trapezium")
```

The `start`values can now be used in the `blqr()` function.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4,3,13.5,31,-4.5)

model2 <- blqr(x=x,y=y, start = start, model = "trapezium",
             xlab=expression("Phosphorus/ mg L"^-1), 
             ylab=expression("Phosphorus/ln(mg L"^-1*")"),
             pch=16,tau=0.99, col="grey") # may take a few seconds to ran

model2
```

The results show that the optimized parameters and plot. The quantile regression method will produce measures of uncertainty for parameters, but BLA does not report these because they are conditional on the arbitrary choice of `tau`. These parameters can then be used to determine boundary line response for any given value of *`x`* using the `predictBL()` function.

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 3

</button>

::: {#my-collapse .collapse .mt-3}
1.  Use the `maize` dataset to fit the boundary line model for cassava yield and any soil property of your choice using the blqr function assigning it mod_3
:::

<!-- Unlock input + button -->

::: mt-3
<label for="keyInput">Enter key to view answer:</label> <input type="text" id="keyInput" class="form-control" placeholder="Enter keyword"> <button class="btn btn-success mt-2" onclick="checkKey()">Submit</button>
:::

<!-- Hidden answer section -->

::: {#answerContent .collapse .mt-3}
```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}
code_here
```

<!-- Hide button -->

<button class="btn btn-outline-secondary mt-2" onclick="hideAnswer()">

Hide Answer

</button>
:::

<!-- JavaScript -->

```{=html}
<script> function checkKey() { const input = document.getElementById('keyInput').value.trim().toLowerCase(); const answer = document.getElementById('answerContent'); if (input === 'model5') { answer.classList.add('show'); } else { alert('Incorrect key. Please try again.'); } } function hideAnswer() { const answer = document.getElementById('answerContent'); answer.classList.remove('show'); } </script>
```
:::

### 5.4 Censored bivariate normal model

Before fitting the boundary line model, the data is plotted to get a feel of the distribution of points at the upper edges. This allows the selection of an appropriate boundary model. This should be supported by biological/agronomic plausibility.

```{r, eval = FALSE}
plot(x,y,pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)") 
```

A trapezium boundary model is appropriate for this data. The censored bivariate normal procedure (cbvn) will be used to fit the boundary model. To fit the cbvn, some arguments need to be estimated. These include the initial starting values of the trapezium model and value for the standard deviation of measurement error.

#### 5.4.1 Determination of initial starting values

Here we come up with the initial starting values for the optimization process. Since the selected model is the trapezium, the starting values will be a vector of length 10 comprising the y-intercept, slope, plateau value, second y-intercept, second slope and data distribution properties i.e means of `x` and `y`, standard deviation of `x` and `y`, and their correlation.

To determine start values for the selected trapezium model, the `startValues()` function is used. We determine several start values to avoid sticking to a local optimum solution. Note that for the `startValues()` function to work effectively, the appearance zoom in the global options of R and your computer display zoom should be equal i.e.both should be at 100%.

```{r, eval = FALSE}
startValues("trapezium") 
```

click on the plot 4 points that make up the trapezium structure at the upper edge of the data cloud in a clockwise movement. We run this step multiple times and the values are added to the list of starting values below.

```{r, eval = FALSE}
start<-list(
  c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(3.5,3.7,13.35,47.7,-8.4,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(2.83,4.11,13.7,32.,-4.6,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(4.1,3.4,13.6,29,-4.1,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
```

#### 5.4.2 Determination of standard deviation of measurement error

The standard deviation of measurement error (`sigh`) is a fixed parameter in the boundary line determination using cbvn. As we do not have a direct measure of `sigh`, it is determined by log-likelihood profiling. In this process, the negative log-likelihoods of several suggested values of sigh are determined given the data distribution and the suggested model. The sigh value with the smallest negative log-likelihood is selected. This is done using the `ble_profile()` function at the multiple start values.

```{r, eval = FALSE}
sigh<-c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) # we suggest sigh values ranging from 0.3 to 1 t/ha

```

**Note**: This function will take a few minutes to run as it is evaluating each sigh value for each set of start values. We use the lapply function to loop over each sigh and start value set.

```{r, eval = FALSE}
profile <- lapply(start, function(start) {
  
  lapply(sigh, function(sigh) {
    
    ble_profile(data = vals, start = start, sigh = sigh, model = "trapezium", plot = F)
  })
})

# Extract log-likelihood and sigh (Merror) values from profile list

log_likelihood <- unlist(lapply(profile, function(sublist) {
  sapply(sublist, function(x) x[["log-likelihood"]])
}))

Merror<- unlist(lapply(profile, function(sublist) {
  sapply(sublist, function(x) x[["Merror"]])
}))

# The sigh with the smallest negative log-likelihood 

Merror[which(log_likelihood==max(log_likelihood, na.rm = T))]# profile maximized  at 0.4 t/ha



```

Plotting the log-likelihood profile for visualization

```{r, eval=FALSE}

me_profile<-data.frame(x=Merror,y=log_likelihood)
me_profile<-me_profile[order(Merror),] # ordering data from smallest to largest Merror

vec<-vector()

for(i in unique(me_profile$x)){ 
  maxy<-max(me_profile[which(me_profile$x==i),]$y, na.rm = T)
  vec<-c(vec,maxy)
}

# ploting the largest value at each Merror

par(mar=c(5,5,4,4))

plot(unique(me_profile$x),vec,pch=16, 
     xlab=expression(bold(sigma[e]*"/t ha"^-1)),
     ylab=expression(bold(log-Likelihood)),
     cex.lab=1.8, cex.axis=1.8)
lines(unique(me_profile$x),vec, lty=5, lwd=1.5) 
abline(v=Merror[which(log_likelihood==max(log_likelihood, na.rm = T))],
       lty=5, col="red", lwd=1.3) # sigh with largest log-likelihood
```

#### 5.4.3 Fitting the boundary line using cbvn model

All the arguments for the censored bivariate normal model function are set. To fit the boundary line, the function `cbvn()` is used. We do this using multiple start values to avoid sticking at a local optimum solution. The solution with the smallest negative log-likelihood value is selected. This is equivalent to selecting the model with the smallest Aikaike Information Criterion (AIC) value, which is an output of the `cbvn()` function. The `lapply()` function is used here to allows us to loop the `cbvn()` over the different start values. The `tryCatch()` allows the loop function to continue to the next input when the function fails to converge at a given input combination.

```{r, eval = FALSE}

models <- lapply(start, function(start) {
  
  tryCatch(
    
    cbvn(data=vals, start = start, sigh=0.4, model = "trapezium",
         optim.method = "Nelder-Mead",
         xlab=expression("Phosphorus/ mg L"^-1), 
         ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
    
    error=function(e) NA) 
})


```

Selects the solution with the smallest value of **AIC**

```{r, eval=FALSE}


model_4 <- models[[which.min(unlist(lapply(X=models,FUN = function(a){
  
  b<-tryCatch(a$AIC[2,1],error=function(e) NA)
  return(b)})))]]

Model_4
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 5

</button>

::: {#my-collapse .collapse .mt-3}
1.  Determine the boundary line for soil pH from the `Soil` dataset (within the BLA) and assign it Model_5. Use the `sigh = 0.6`. There is no need to test for presence of boundary as it has already been established earlier using Soil P.
:::

<!-- Unlock input + button -->

::: mt-3
<label for="keyInput">Enter key to view answer:</label> <input type="text" id="keyInput" class="form-control" placeholder="Enter keyword"> <button class="btn btn-success mt-2" onclick="checkKey()">Submit</button>
:::

<!-- Hidden answer section -->

::: {#answerContent .collapse .mt-3}
```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}
code_here
```

<!-- Hide button -->

<button class="btn btn-outline-secondary mt-2" onclick="hideAnswer()">

Hide Answer

</button>
:::

<!-- JavaScript -->

```{=html}
<script> function checkKey() { const input = document.getElementById('keyInput').value.trim().toLowerCase(); const answer = document.getElementById('answerContent'); if (input === 'model5') { answer.classList.add('show'); } else { alert('Incorrect key. Please try again.'); } } function hideAnswer() { const answer = document.getElementById('answerContent'); answer.classList.remove('show'); } </script>
```
:::

## 6. Predicting boundary yield for each data point in our dataset

The largest expected yield for each value of soil P in our data set is estimated from the boundary line model parameters. This is done using the function `predictBL()`. The inputs are the model object and a vector of soil P values.

```{r, eval = FALSE}
P_data <-log(soil$P) # extracting soil P from the data set
                     # replace missing values with mean soil P value
P<-predictBL(model_1,P_data) # boundary yield for soil P
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 6

</button>

::: {#my-collapse .collapse .mt-3}
1.  Use the results from your model5 for soil pH to predict the largest yields for each value of soil pH. Replace the missing pH value with the mean.
:::

<!-- Unlock input + button -->

::: mt-3
<label for="keyInput">Enter key to view answer:</label> <input type="text" id="keyInput" class="form-control" placeholder="Enter keyword"> <button class="btn btn-success mt-2" onclick="checkKey()">Submit</button>
:::

<!-- Hidden answer section -->

::: {#answerContent .collapse .mt-3}
```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}
code_here
```

<!-- Hide button -->

<button class="btn btn-outline-secondary mt-2" onclick="hideAnswer()">

Hide Answer

</button>
:::

<!-- JavaScript -->

```{=html}
<script> function checkKey() { const input = document.getElementById('keyInput').value.trim().toLowerCase(); const answer = document.getElementById('answerContent'); if (input === 'model5') { answer.classList.add('show'); } else { alert('Incorrect key. Please try again.'); } } function hideAnswer() { const answer = document.getElementById('answerContent'); answer.classList.remove('show'); } </script>
```
:::

## 8. Posthoc Analysis

## 9. Additional Material: Using your own defined model

The illustrated methods for fitting the boundary line have some in-built models. These include the linear, linear plateau, mitscherlich, schmidt, logistic, logistic model proposed by Nelder (1961), the inverse logistic, double logistic, quadratic and the trapezium models. However, there are some cases where one wants to fit another model which is not part of the built in models. The following steps will illustrate how to fit a custom model. Though this will be illustrated using the `bolides()` function, it also applies for the `blbin()`, `blqr()` and `cbvn()` functions.

Assuming that the initial data exploratory step have been done, the first step is to check the structure of the boundary points using the argument `model="explore"` in the `bolides()` function.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bolides(x=x,y=x,model="explore", pch=16, col="grey")
```

Lets say you want to fit a model

$$
y=\beta_0 - \beta_1(x-\beta_2)^2
$$

The model is written in form of an `R` function and the parameters should always be written in alphabetical order as ***a**, **b*** and ***c*** for a three parameter function, ***a**, **b**,**c*** and ***d*** for four parameter function and so on.

```{r}
custom_function<-function(x,a,b,c){
  y<- a - b*(x-c)^2
}
```

The next step is to suggest the initial start `start` values. These should be sensible values else the function will not converge. These should be arranges in alphabetical order as `start=c(a,b,c)`. Replace a, b and c with numeric values of your choice.

The arguments of `bolides()` function can now be added. In this case, the argument model while be set to "other". The arguments equation is now set to your custom function (`equation=custom_function`)

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
start<-c(13.5,3,3.3)  

model4<-bolides(x,y, start = start,model = "other",
                equation=custom_function,
                xlab=expression("Phosphorus/mg L"^-1), 
                ylab=expression("Phosphorus/ln(mg L"^-1*")"), 
                pch=16, ylim=c(3.8,14.5), col="grey",bp_col="grey")

model4
```

The parameters of the models are shown in the results. A prediction of the boundary response values for each value of *`x`* can the be done as previously shown using the `predictBL()` function.

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 7

</button>

::: {#my-collapse .collapse .mt-3}
1.  From the variables in data, choose one and fit the boundary line model using a custom model of your choice.
:::
:::
