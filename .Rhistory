}
parscale <- function(a, x, y) {
eps <- 1e-4
nr <- length(a)
part <- numeric(nr)
for (i in 1:nr) {
del <- rep(0, nr)
del[i] <- eps
part[i] <- (rss(a + del, x, y) - rss(a, x, y)) / eps
}
scale <- 1 / pmax(abs(part), 1e-6)
pmin(scale, 1e4)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
ar <- oo$par[1]; br <- oo$par[2]; ym <- oo$par[3]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- ifelse(ar + br * xfine > ym, ym, ar + br * xfine)
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(ar, br, ym), ncol = 1, dimnames = list(c("β₁", "β₂", "β₀"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = min (β₁ + β₂x, β₀)")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
stop("Model not recognized or not implemented in this version.")
}
bolides2(x,y, start = start,model = "explore",
xlab=expression("Phosphorus/ln(mg L"^-1*")"),
ylab=expression("Yield/ t ha"^-1), pch=16,
col="grey", bp_col="grey")
bolides2 <- function(x, y, model = "explore", equation = NULL, start,
xmin = min(x), xmax = max(x), plot = TRUE,
bp_col = "red", bp_pch = 16, bl_col = "red", lwd = 1,
line_smooth = 1000, optim.method = "Nelder-Mead", ...) {
BLMod <- model
y_max <- numeric()
dat <- data.frame(x = x, y = y)
test <- which(is.na(dat$x) | is.na(dat$y))
data <- if (length(test) > 0) dat[-test, ] else dat
data1 <- data[order(data$x), ]
for (i in unique(na.omit(data1$x))) {
y_max[which(unique(na.omit(data1$x)) == i)] <- max(data1$y[which(data1$x == i)])
}
newdata <- data.frame(x = unique(na.omit(data1$x)), y_max)
bound <- newdata$y_max
for (i in 1:length(bound)) {
bound[i] <- max(bound[i], max(newdata$y_max[1:i]))
}
newdata2 <- data.frame(x = unique(na.omit(data1$x)), y = bound)
trim <- newdata2$y
dummy <- c(min(newdata2$y) * 10, newdata2$y)
for (i in 1:length(newdata2$y)) {
trim[i] <- newdata2$y[i] == dummy[i]
}
newdata2$trim <- trim
newdata2 <- newdata2[-which(newdata2$trim == 1), ]
y_max2 <- numeric()
data2 <- data
data21 <- data2[order(data2$x, decreasing = TRUE), ]
for (i in unique(na.omit(data21$x))) {
y_max2[which(unique(na.omit(data21$x)) == i)] <- max(data21$y[which(data21$x == i)])
}
newdata3 <- data.frame(x = unique(na.omit(data21$x)), y_max2)
bound2 <- newdata3$y_max2
for (i in 1:length(bound2)) {
bound2[i] <- max(bound2[i], max(newdata3$y_max2[1:i]))
}
newdata4 <- data.frame(x = unique(na.omit(data21$x)), y = bound2)
trim2 <- newdata4$y
dummy2 <- c(min(newdata4$y) * 10, newdata4$y)
for (i in 1:length(newdata4$y)) {
trim2[i] <- newdata4$y[i] == dummy2[i]
}
newdata4$trim <- trim2
newdata4 <- newdata4[-which(newdata4$trim == 1), ]
newdata6 <- data.frame(x = c(newdata2$x, newdata4$x), y = c(newdata2$y, newdata4$y))
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
bound <- newdata6
L <- xmin
U <- xmax
if (L < min(bound$x)) stop("The set minimum limit is less than the minimum of bounding points")
if (U > max(bound$x)) stop("The set maximum limit is greater than the maximum of bounding points")
bound2 <- if (L == min(bound$x)) bound else bound[-which(bound$x < L), ]
newdata5 <- if (U == max(bound2$x)) bound2 else bound2[-which(bound2$x > U), ]
if (model == "explore") {
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
return(summary(newdata6))
}
# Example for linear model with optim
if (model == "blm") {
trap <- function(x, ar, br) ar + br * x
rss <- function(start, x, y) {
ar <- start[1]; br <- start[2]
sum((y - (ar + br * x))^2) / length(x)
}
parscale <- function(a, x, y) {
eps <- 1e-4
nr <- length(a)
part <- numeric(nr)
for (i in 1:nr) {
del <- rep(0, nr)
del[i] <- eps
part[i] <- (rss(a + del, x, y) - rss(a, x, y)) / eps
}
scale <- 1 / pmax(abs(part), 1e-6)
pmin(scale, 1e4)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("β₁", "β₂"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = β₁ + β₂x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("\u03B2\u2081", "\u03B2\u2082"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = \u03B2\u2081 + \u03B2\u2082x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
bolides2 <- function(x, y, model = "explore", equation = NULL, start,
xmin = min(x), xmax = max(x), plot = TRUE,
bp_col = "red", bp_pch = 16, bl_col = "red", lwd = 1,
line_smooth = 1000, optim.method = "Nelder-Mead", ...) {
BLMod <- model
y_max <- numeric()
dat <- data.frame(x = x, y = y)
test <- which(is.na(dat$x) | is.na(dat$y))
data <- if (length(test) > 0) dat[-test, ] else dat
data1 <- data[order(data$x), ]
for (i in unique(na.omit(data1$x))) {
y_max[which(unique(na.omit(data1$x)) == i)] <- max(data1$y[which(data1$x == i)])
}
newdata <- data.frame(x = unique(na.omit(data1$x)), y_max)
bound <- newdata$y_max
for (i in 1:length(bound)) {
bound[i] <- max(bound[i], max(newdata$y_max[1:i]))
}
newdata2 <- data.frame(x = unique(na.omit(data1$x)), y = bound)
trim <- newdata2$y
dummy <- c(min(newdata2$y) * 10, newdata2$y)
for (i in 1:length(newdata2$y)) {
trim[i] <- newdata2$y[i] == dummy[i]
}
newdata2$trim <- trim
newdata2 <- newdata2[-which(newdata2$trim == 1), ]
y_max2 <- numeric()
data2 <- data
data21 <- data2[order(data2$x, decreasing = TRUE), ]
for (i in unique(na.omit(data21$x))) {
y_max2[which(unique(na.omit(data21$x)) == i)] <- max(data21$y[which(data21$x == i)])
}
newdata3 <- data.frame(x = unique(na.omit(data21$x)), y_max2)
bound2 <- newdata3$y_max2
for (i in 1:length(bound2)) {
bound2[i] <- max(bound2[i], max(newdata3$y_max2[1:i]))
}
newdata4 <- data.frame(x = unique(na.omit(data21$x)), y = bound2)
trim2 <- newdata4$y
dummy2 <- c(min(newdata4$y) * 10, newdata4$y)
for (i in 1:length(newdata4$y)) {
trim2[i] <- newdata4$y[i] == dummy2[i]
}
newdata4$trim <- trim2
newdata4 <- newdata4[-which(newdata4$trim == 1), ]
newdata6 <- data.frame(x = c(newdata2$x, newdata4$x), y = c(newdata2$y, newdata4$y))
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
bound <- newdata6
L <- xmin
U <- xmax
if (L < min(bound$x)) stop("The set minimum limit is less than the minimum of bounding points")
if (U > max(bound$x)) stop("The set maximum limit is greater than the maximum of bounding points")
bound2 <- if (L == min(bound$x)) bound else bound[-which(bound$x < L), ]
newdata5 <- if (U == max(bound2$x)) bound2 else bound2[-which(bound2$x > U), ]
if (model == "explore") {
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
return(summary(newdata6))
}
# Example for linear model with optim
if (model == "blm") {
trap <- function(x, ar, br) ar + br * x
rss <- function(start, x, y) {
ar <- start[1]; br <- start[2]
sum((y - (ar + br * x))^2) / length(x)
}
parscale <- function(a, x, y) {
eps <- 1e-4
nr <- length(a)
part <- numeric(nr)
for (i in 1:nr) {
del <- rep(0, nr)
del[i] <- eps
part[i] <- (rss(a + del, x, y) - rss(a, x, y)) / eps
}
scale <- 1 / pmax(abs(part), 1e-6)
pmin(scale, 1e4)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("β₁", "β₂"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = β₁ + β₂x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("\u03B2\u2081", "\u03B2\u2082"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = \u03B2\u2081 + \u03B2\u2082x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
}
bolides2 <- function(x, y, model = "explore", equation = NULL, start,
xmin = min(x), xmax = max(x), plot = TRUE,
bp_col = "red", bp_pch = 16, bl_col = "red", lwd = 1,
line_smooth = 1000, optim.method = "Nelder-Mead", ...) {
BLMod <- model
y_max <- numeric()
dat <- data.frame(x = x, y = y)
test <- which(is.na(dat$x) | is.na(dat$y))
data <- if (length(test) > 0) dat[-test, ] else dat
data1 <- data[order(data$x), ]
for (i in unique(na.omit(data1$x))) {
y_max[which(unique(na.omit(data1$x)) == i)] <- max(data1$y[which(data1$x == i)])
}
newdata <- data.frame(x = unique(na.omit(data1$x)), y_max)
bound <- newdata$y_max
for (i in 1:length(bound)) {
bound[i] <- max(bound[i], max(newdata$y_max[1:i]))
}
newdata2 <- data.frame(x = unique(na.omit(data1$x)), y = bound)
trim <- newdata2$y
dummy <- c(min(newdata2$y) * 10, newdata2$y)
for (i in 1:length(newdata2$y)) {
trim[i] <- newdata2$y[i] == dummy[i]
}
newdata2$trim <- trim
newdata2 <- newdata2[-which(newdata2$trim == 1), ]
y_max2 <- numeric()
data2 <- data
data21 <- data2[order(data2$x, decreasing = TRUE), ]
for (i in unique(na.omit(data21$x))) {
y_max2[which(unique(na.omit(data21$x)) == i)] <- max(data21$y[which(data21$x == i)])
}
newdata3 <- data.frame(x = unique(na.omit(data21$x)), y_max2)
bound2 <- newdata3$y_max2
for (i in 1:length(bound2)) {
bound2[i] <- max(bound2[i], max(newdata3$y_max2[1:i]))
}
newdata4 <- data.frame(x = unique(na.omit(data21$x)), y = bound2)
trim2 <- newdata4$y
dummy2 <- c(min(newdata4$y) * 10, newdata4$y)
for (i in 1:length(newdata4$y)) {
trim2[i] <- newdata4$y[i] == dummy2[i]
}
newdata4$trim <- trim2
newdata4 <- newdata4[-which(newdata4$trim == 1), ]
newdata6 <- data.frame(x = c(newdata2$x, newdata4$x), y = c(newdata2$y, newdata4$y))
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
bound <- newdata6
L <- xmin
U <- xmax
if (L < min(bound$x)) stop("The set minimum limit is less than the minimum of bounding points")
if (U > max(bound$x)) stop("The set maximum limit is greater than the maximum of bounding points")
bound2 <- if (L == min(bound$x)) bound else bound[-which(bound$x < L), ]
newdata5 <- if (U == max(bound2$x)) bound2 else bound2[-which(bound2$x > U), ]
if (model == "explore") {
if (plot == TRUE) {
plot(x, y, ...)
points(newdata6$x, newdata6$y, col = bp_col, pch = bp_pch)
}
return(summary(newdata6))
}
# Example for linear model with optim
if (model == "blm") {
trap <- function(x, ar, br) ar + br * x
rss <- function(start, x, y) {
ar <- start[1]; br <- start[2]
sum((y - (ar + br * x))^2) / length(x)
}
parscale <- function(a, x, y) {
eps <- 1e-4
nr <- length(a)
part <- numeric(nr)
for (i in 1:nr) {
del <- rep(0, nr)
del[i] <- eps
part[i] <- (rss(a + del, x, y) - rss(a, x, y)) / eps
}
scale <- 1 / pmax(abs(part), 1e-6)
pmin(scale, 1e4)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("β₁", "β₂"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = β₁ + β₂x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
arf <- oo$par[1]; brf <- oo$par[2]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- arf + brf * xfine
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(arf, brf), ncol = 1, dimnames = list(c("\u03B2\u2081", "\u03B2\u2082"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = \u03B2\u2081 + \u03B2\u2082x")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
# Linear plateau model
if (model == "lp") {
rss <- function(start, x, y) {
ar <- start[1]; br <- start[2]; ym <- start[3]
yfit <- ifelse(ar + br * x > ym, ym, ar + br * x)
sum((y - yfit)^2) / length(x)
}
parscale <- function(a, x, y) {
eps <- 1e-4
nr <- length(a)
part <- numeric(nr)
for (i in 1:nr) {
del <- rep(0, nr)
del[i] <- eps
part[i] <- (rss(a + del, x, y) - rss(a, x, y)) / eps
}
scale <- 1 / pmax(abs(part), 1e-6)
pmin(scale, 1e4)
}
ooo <- optim(start, rss, x = newdata5$x, y = newdata5$y, method = optim.method)
scale <- parscale(ooo$par, x = newdata5$x, y = newdata5$y)
oo <- optim(ooo$par, rss, x = newdata5$x, y = newdata5$y, method = optim.method, control = list(parscale = scale))
ar <- oo$par[1]; br <- oo$par[2]; ym <- oo$par[3]
if (plot == TRUE) {
xfine <- seq(min(x), max(x), length.out = line_smooth)
yfit <- ifelse(ar + br * xfine > ym, ym, ar + br * xfine)
lines(xfine, yfit, col = bl_col, lwd = lwd)
}
estimates <- matrix(c(ar, br, ym), ncol = 1, dimnames = list(c("β₁", "β₂", "β₀"), "Estimate"))
RMS <- oo$value
Equation <- noquote("y = min (β₁ + β₂x, β₀)")
Parameters <- list(Model = BLMod, Equation = Equation, Parameters = estimates, RMS = RMS, Boundary_points = newdata6)
class(Parameters) <- "wm"
return(Parameters)
}
stop("Model not recognized or not implemented in this version.")
}
library(BLA)
dat <- data.frame(x=log(soil$P), y=soil$yield) #Input for the bagplot() is a dataframe of x and y.
out <- bagplot(dat,show.whiskers = F)# Figure 2 in article
library(aplpack)
dat <- data.frame(x=log(soil$P), y=soil$yield) #Input for the bagplot() is a dataframe of x and y.
out <- bagplot(dat,show.whiskers = F)# Figure 2 in article
legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"), pch = c(15,15,8,3),
col = c(adjustcolor( "#7799ff", alpha.f = 0.7), "#aaccff","red","red")) #adds legend
vals <- rbind(out$pxy.bag,out$pxy.outer)
head(vals)
start2<-list(
c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(3.5,3.7,13.35,47.7,-8.4,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.83,4.11,13.7,32.,-4.6,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(4.1,3.4,13.6,29,-4.1,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
start2<-list(
c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
models <- lapply(start2, function(start) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models
models <- lapply(start2, function(start2) {
tryCatch(
cbvn(data=vals, start2 = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models
start2<-list(
c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
start2<-list(
c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
models <- lapply(start2, function(start) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
vals
models <- lapply(start2, function(start2) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models <- lapply(start2, function(start) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models
models <- lapply(start2, function(start2) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models <- lapply(start2, function(start2) {
tryCatch(
cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
error=function(e) NA)
})
models
?blbin
library(BLA)
?blbin
setwd("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA_NETHERLAND_Rothamsted")
