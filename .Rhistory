plot(vals2, pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)")
startValues("lp")
start2 <- c(-10.28,3.66,13.8,mean(vals2[,1]),mean(vals2[,2]),sd(vals2[,1]),sd(vals2[,2]),cor(vals2[,1],vals2[,1]))
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
model5 <- cbvn(data=vals2, start = start2, sigh=0.7, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
locator(1)
start2 <- c(-10.28,3.66,13.3,mean(vals2[,1]),mean(vals2[,2]),sd(vals2[,1]),sd(vals2[,2]),cor(vals2[,1],vals2[,1]))
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
start2 <- c(-10.28,4,13.3,mean(vals2[,1]),mean(vals2[,2]),sd(vals2[,1]),sd(vals2[,2]),cor(vals2[,1],vals2[,1]))
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
startValues("lp")
start2 <- c(-2.96,2.5,13.5,mean(vals2[,1]),mean(vals2[,2]),sd(vals2[,1]),sd(vals2[,2]),cor(vals2[,1],vals2[,1]))
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
model5
plot(vals2, pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)")
startValues("lp")
start2 <- c(-6.07,3.05,13.53,mean(vals2[,1]),mean(vals2[,2]),sd(vals2[,1]),sd(vals2[,2]),cor(vals2[,1],vals2[,1]))
model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
optim.method = "Nelder-Mead",
xlab=expression("Soil pH"),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
model5
pH_data <-soil$pH #
soil$pH
pH_data <- soil$pH
pH_data [which(is.na(pH_data )==T)]<-mean(pH_data ,na.rm=T)# replace missing values with mean
pH<-predictBL(model5,pH_data) # boundary yield for soil pH
pH
dat <- data.frame(x=log(soil$P), y=soil$yield) #Input for the bagplot() is a dataframe of x and y.
dat[which(is.na(dat$x)==T),1] <- mean(dat$x,na.rm=T)
dat[which(is.na(dat$y)==T),2] <- mean(dat$y,na.rm=T)
out <- bagplot(dat,show.whiskers = F)
vals <- rbind(out$pxy.bag,out$pxy.outer)
head(vals)
start1 <- c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y))
x <- vals[,1]
y <- vals[,2]
plot(x,y,pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)")
start1 <- c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y))
model4 <- cbvn(data=vals, start = start1, sigh=0.4, model = "trapezium",
optim.method = "Nelder-Mead",
xlab=expression("Phosphorus/ mg L"^-1),
ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
P_data <-log(soil$P) # extracting soil P from the data set
P_data[which(is.na(P_data)==T)]<-mean(P_data,na.rm=T) # replace missing values with mean soil P value
P<-predictBL(model4,P_data) # boundary yield for soil P
Limiting_factor <- limfactor(P, pH)
Limiting_factors <- Limiting_factor[[1]]
head(Limiting_factors)
Limiting_factor[[2]]
Attainable_yield <- Limiting_factor[[2]]
Attainable_yield
soil$yield
which(soil$yield > Attainable_yield)
max(soil$yield )
b <- soil$yield
max(soil$yield )
max(b)
b[which(b > Attainable_yield)] <- Attainable_yield
max(b)
# a) Parameters for the censored normal distribution
mu <- 7       # mean
sigma <- 3    # standard deviation
R <- 10        # right-censoring threshold
x <- seq(0, 12, length.out = 1000)
# Density function under right-censoring at R
dcens_norm_right <- function(x, mu, sigma, R) {
# Conditional density for x <= R
cond_density <- dnorm(x, mean = mu, sd = sigma) / pnorm(R, mean = mu, sd = sigma)
ifelse(
x <= R,
cond_density,
0  # No density for x > R
)
}
# Apply the function
y <- dcens_norm_right(x, mu, sigma, R)
a <- seq(8.4, 11.6, length.out = 1000)
# Define parameters
center <- 10       # mean
height <- 0.04    # peak height
width <- 0.5     # spread (standard deviation)
# Create the bell-shaped curve
b <- dnorm(a, mean = center, sd = width)
b <- b / max(b) * height  # normalize to desired peak height
plot(x[1:834], y[1:834], type = "l", lwd = 2, col = "blue",
main = "Censored Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,12))
lines(c(10,10),c(0,0.096), col="red", lwd=3)
lines(a,b, lwd=3)
polygon(c(a, rev(a)), c(rep(0, length(b)), rev(b)),
col = rgb(0, 0, 0, 0.2), border = NA)
legend("topleft", legend = c("Yield density","Boundary model","Measurement Error Distribution"),
col=c("blue","red", "black"), lty=c(1,1,1), lwd=c(3,3,3), cex=1.25,
title = expression(bold("")), bty="n")
mu <- 7       # mean
sigma <- 3    # standard deviation
R <- 10
x <- seq(0, 14, length.out = 1000)
density <- dnorm(x, mean = mu, sd = sigma)
plot(x, density, type = "l", lwd = 2, col = "blue",
main = "Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,15))
lines(c(10,10),c(0,0.08), col="red", lwd=3)
c <- x[715:1000]
d <- density[715:1000]
polygon(c(c, rev(c)), c(rep(0, length(d)), rev(d)),
col = rgb(1, 0, 0, 0.2), border = NA)
points(c(2,4,6,8,10,12), rep(0.005,6), cex=2, col="black", pch=16)
dnorm(c(2,4,6,8,10,12), mean = mu, sd = sigma)
lines(c(2,2),c(0,0.03315905), lty=5)
lines(c(4,4),c(0,0.08065691), lty=5)
lines(c(-1,2),c(0.03315905,0.03315905), lty=5)
lines(c(-1,4),c(0.08065691,0.08065691), lty=5)
legend("topleft", legend = c("Yield density","Boundary model"),
col=c("blue","red"), lty=c(1,1), lwd=c(3,3), cex=1.25,
title = expression(bold("")), bty="n")
text(12,0.12, expression(bold("L ="*"log(d"[1]*") + log("*"d"[2]*") + "*"..."*"+"*" log(d"[n]*")")), cex=1.3)
plot(x, density, type = "l", lwd = 2, col = "blue",
main = "Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,15))
lines(c(10,10),c(0,0.08), col="red", lwd=3)
c <- x[715:1000]
d <- density[715:1000]
points(c(2,4,6,8,10,12), rep(0.005,6), cex=2.5, col="black", pch=16)
points(c(10,12), rep(0.01,2), cex=2.5, col="black", pch=16)
lines(c(2,2),c(0,0.03315905), lty=5)
lines(c(4,4),c(0,0.08065691), lty=5)
lines(c(6,6),c(0,0.12579441), lty=5)
lines(c(8,8),c(0,0.12579441), lty=5)
lines(c(10,10),c(0,0.08065691), lty=5)
lines(c(12,12),c(0,0.03315905), lty=5)
lines(c(-1,2),c(0.03315905,0.03315905), lty=5)
lines(c(-1,4),c(0.08065691,0.08065691), lty=5)
lines(c(-1,6),c(0.12579441,0.12579441), lty=5)
lines(c(-1,8),c(0.12579441,0.12579441), lty=5)
lines(c(-1,10),c(0.08065691,0.08065691), lty=5)
lines(c(-1,12),c(0.03315905,0.03315905), lty=5)
lines(c(10,10),c(0,0.08), col="red", lwd=3)
text(13,0.06, expression(bold("Area > b = 0.3")), cex=1.3)
0.035*0.08*0.125*0.125*2*0.3
plot(x, density, type = "l", lwd = 2, col = "blue",
main = "Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,15))
dnorm(c(11), mean = mu, sd = sigma)
lines(c(11,11),c(0,0.05467002), col="red", lwd=3)
lines(c(-1,11),c(0.05467002,0.05467002), lty=5)
text(13,0.06, expression(bold("Area > b = 0.25")), cex=1.3)
legend("topright", legend = c("Yield density","Boundary model"),
col=c("blue","red"), lty=c(1,1), lwd=c(3,3), cex=1.25,
title = expression(bold("")), bty="n")
points(c(2,4,6,8,10,12), rep(0.005,6), cex=2.5, col="black", pch=16)
points(c(10,12), rep(0.01,2), cex=2.5, col="black", pch=16)
lines(c(2,2),c(0,0.03315905), lty=5)
lines(c(4,4),c(0,0.08065691), lty=5)
lines(c(6,6),c(0,0.12579441), lty=5)
lines(c(8,8),c(0,0.12579441), lty=5)
lines(c(10,10),c(0,0.08065691), lty=5)
lines(c(12,12),c(0,0.03315905), lty=5)
lines(c(-1,2),c(0.03315905,0.03315905), lty=5)
lines(c(-1,4),c(0.08065691,0.08065691), lty=5)
lines(c(-1,6),c(0.12579441,0.12579441), lty=5)
lines(c(-1,8),c(0.12579441,0.12579441), lty=5)
lines(c(-1,10),c(0.08065691,0.08065691), lty=5)
lines(c(-1,12),c(0.03315905,0.03315905), lty=5)
0.035*0.08*0.125*0.125*2
plot(x, density, type = "l", lwd = 2, col = "blue",
main = "Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,15))
lines(c(10,10),c(0,0.08), col="red", lwd=3)
plot(x, density, type = "l", lwd = 2, col = "blue",
main = "Normal Density",
xlab = expression(bold("Yield/t ha)"^-1)),
ylab = expression(bold("Density")),
xlim=c(0,15))
points(c(2,4,6,8,10,12), rep(0.005,6), cex=2.5, col="black", pch=16)
points(c(10,12), rep(0.01,2), cex=2.5, col="black", pch=16)
lines(c(2,2),c(0,0.03315905), lty=5)
lines(c(4,4),c(0,0.08065691), lty=5)
lines(c(6,6),c(0,0.12579441), lty=5)
lines(c(8,8),c(0,0.12579441), lty=5)
lines(c(10,10),c(0,0.08065691), lty=5)
lines(c(12,12),c(0,0.03315905), lty=5)
lines(c(-1,2),c(0.03315905,0.03315905), lty=5)
lines(c(-1,4),c(0.08065691,0.08065691), lty=5)
lines(c(-1,6),c(0.12579441,0.12579441), lty=5)
lines(c(-1,8),c(0.12579441,0.12579441), lty=5)
lines(c(-1,10),c(0.08065691,0.08065691), lty=5)
lines(c(-1,12),c(0.03315905,0.03315905), lty=5)
lines(c(9,9),c(0,dnorm(c(9), mean = mu, sd = sigma)), col="red", lwd=3)
lines(c(-1,9),c(dnorm(c(9), mean = mu, sd = sigma),dnorm(c(9), mean = mu, sd = sigma)), lty=5)
text(13,0.06, expression(bold("Area > b = 0.35")), cex=1.3)
0.035*0.08*0.125*0.125
log(0.035)+log(0.08) + log(0.125)+log(0.125) +log(0.3)+log(0.3)
log(0.035)+log(0.08)+log(0.125)+log(0.125)+log(0.08)+log(0.08)
log(0.035)+log(0.08)+log(0.125)+log(0.125)
log(0.3)
log(0.125)
log(0)
maize <- read.csv("https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/maize_data.csv")
head(maize)
74+90.7+6.96+23.4+18.60+17.6+11.2+11.2+17.6+13.65+4.91
library(BLA)
dat2<-data.frame(soil$pH,soil$yield)# Input for bagplot() is a dataframe of x and y.
out2<-bagplot(dat2, show.whiskers = F)
library(aplpack)
out2<-bagplot(dat2, show.whiskers = F)
vals2<-rbind(out2$pxy.bag,out2$pxy.outer)
x2<-vals2[,1]
y2<-vals2[,2]
?expl_boundary
expl_boundary(x2,y2, method = "Area")
dat2<-data.frame(soil$P,soil$yield)# Input for bagplot() is a dataframe of x and y.
out2<-bagplot(dat2, show.whiskers = F)
legend("bottomright", legend = c("Bag","Loop", "depth median","outlier"), pch = c(15,15,8,3),
col = c(adjustcolor( "blue", alpha.f = 0.7),
"lightblue","red","red" ))
vals2<-rbind(out2$pxy.bag,out2$pxy.outer)
plot(log(vals2[,1]), vals2[,2])
plot(log(vals2[,1]), vals2[,2], col="grey", pch=16)
1/1.17
akaike_weights <- function(aic_values) {
# Check that input is numeric
if (!is.numeric(aic_values)) {
stop("Input must be a numeric vector of AIC values.")
}
# Compute delta AIC values
delta_aic <- aic_values - min(aic_values)
# Compute relative likelihoods
rel_likelihoods <- exp(-0.5 * delta_aic)
# Compute Akaike weights
weights <- rel_likelihoods / sum(rel_likelihoods)
# Return named vector if names are provided
if (!is.null(names(aic_values))) {
names(weights) <- names(aic_values)
}
return(weights)
}
akweight<-function(aic1,aic2){
lam_v<-min(aic1,aic2)
del1<-aic1-lam_v
del2<-aic2-lam_v
wt1<-exp(-del1/2)/(exp(-del1/2)+exp(-del2/2))
wt2<-exp(-del2/2)/(exp(-del1/2)+exp(-del2/2))
op<-matrix(0,nrow=2,ncol=2)
rownames(op)<-c("AIC","Akaike weight")
op[1,]<-c(aic1,aic2)
op[2,]<-c(wt1,wt2)
return(op)
}
akweight(631.0238,622.8959)
akaike_weights <- function(aic_values) {
# Check that input is numeric
if (!is.numeric(aic_values)) {
stop("Input must be a numeric vector of AIC values.")
}
# Compute delta AIC values
delta_aic <- aic_values - min(aic_values)
# Compute relative likelihoods
rel_likelihoods <- exp(-0.5 * delta_aic)
# Compute Akaike weights
weights <- rel_likelihoods / sum(rel_likelihoods)
# Return named vector if names are provided
if (!is.null(names(aic_values))) {
names(weights) <- names(aic_values)
}
return(weights)
}
akweight(631.0238,622.8959)
akaike_weights(model1=631.0238,model2=622.8959)
akaike_weights(c(model1=631.0238,model2=622.8959))
file <- 'https://raw.githubusercontent.com/jvasco323/EiA_YGD_workflow/main/data-wheat-ethiopia.csv'
data <- read.csv(url(file), stringsAsFactors = T)
head(data)
names(data)
str(data$soil_fertility)
str(data$weeding_freq)
boxplot(yield_tha~soil_fertility,data=data)
mod<-lm(yield_tha~soil_fertility,data=data)
hist(mod$residuals)
mod1<-lm(log(yield_tha)~soil_fertility,data=data)
hist(mod1$residuals)
boxplot(log(yield_tha)~soil_fertility,data=data)
y<-log(data$yield_tha)
k<-data$soil_fertility
nlev<-3
# Find mean by level and within-level standard deviation
tapply(y,k,"mean")
sd(mod1$residuals)
par(mfrow=c(3,1))
hist(y[which(k=="Good")])
hist(y[which(k=="Medium")])
hist(y[which(k=="Poor")])
par(mfrow=c(1,1))
boxplot(log(yield_tha)~soil_fertility,data=data)
stripchart(log(yield_tha)~soil_fertility,method="jitter",jitter=0.1,
pch=16,col="black",vertical=T,add=T,data=data)
mu_guess<-c(0.5,0.3,0.13)
sd_guess<-0.65
bound_guess<-c(2.1,2.0,1.8)
theta_guess<-c(mu_guess,bound_guess,sd_guess)
#sigh=0.6
sigh=0.3/mean(data$yield_tha)
pd<-nll_factor_bound_pd(theta_guess,y,k,nlev,sigh)
scale<-1/abs(pd)
mlest<-optim(theta_guess,nll_factor_bound,method="BFGS",
y=y,k=k,nlev=nlev,sigh=sigh,
control = list(parscale = scale))
###################################################
nll_factor_bound<-function(theta,y,k,nlev,sigh){
###################################################
#  negative log likelihood for boundary model for factor
mu<-theta[1:nlev]
bound<-theta[(nlev+1):(2*nlev)]
sd<-theta[(2*nlev+1)]
# y is a value of response variables
# k is a factor with nlev levels
# mu is a vector of nlev means
# bound is a vector of nlev boundary values
# sd is a standard deviation, scalar and common to all levels
# sigh is the measurement error (standard deviation)
n<-length(y)
dens<-vector("numeric",n)
llik<-0
for(i in 1:n){
i.lev<-as.numeric(k[i])
dens<-coffcturb(y[i],mu[i.lev],sd,-Inf,bound[i.lev],sigh)
llik<-llik+log(dens)
}
return(-1*llik)
}
###################################################
nll_factor_bound_pd<-function(theta,y,k,nlev,sigh){
###################################################
# approximate partial derivatives for scaling boundary
# model for factor
eps=1e-4
nr<-length(theta)
part<-vector("numeric",nr)
for (i in 1:nr){
del<-rep(0,nr)
del[i]<-eps
part[i]<-(nll_factor_bound((theta+del),y,k,nlev,sigh)-
nll_factor_bound(theta,y,k,nlev,sigh))/eps
}
return(part)
}
#########################################################################
coffcturb<-function(x,mu,sig,a,c,sigh){
#########################################################################
#  Turban's function for convolution of a censored normal with a measurement
# error
#
# a is right censor, c is left censor.  Set either to Inf/-Inf
#
# Notation as in Turban webpage, except k is substituted for c
k<-((mu-c)/sig)
d<-((mu-a)/sig)
alpha<-((sigh*sigh)*(x-mu))/((sigh*sigh)+(sig*sig))
beta<-sqrt((sigh*sigh*sig*sig)/((sigh*sigh)+(sig*sig)))
gamma<-(beta*sqrt(2*pi))/(2*pi*sig*sigh*(pnorm(d)-pnorm(k)))
com1<--((x-mu)^2)/(2*((sigh*sigh)+(sig*sig)))
com2<-gamma*exp(com1)
f<-com2*(pnorm((x-a-alpha)/beta)-pnorm((x-c-alpha)/beta))
#rescale for censored
f<-f*pnorm(c,mu,sig)
#add contribution at x from mass at c
f<-f+(dnorm((x-c),0,sigh)*(1-pnorm(c,mu,sig)))
return(f)
}
###################################################
nll_factor<-function(theta,y,k,nlev){
###################################################
#  negative log likelihood for factor, unbounded
nlev<-length(theta)-1
mu<-theta[1:nlev]
sd<-theta[(nlev+1)]
# y is a value of response variables
# k is a factor with nlev levels
# mu is a vector of nlev means
# sd is a standard deviation, scalar and common to all levels
n<-length(y)
llik<-0
for(i in 1:n){
i.lev<-as.numeric(k[i])
dens<-dnorm(y[i],mu[i.lev],sd,log=F)
llik<-llik+log(dens)
}
return(-1*llik)
}
###################################################
nll_factor_pd<-function(theta,y,k,nlev){
###################################################
# approximate partial derivatives for scaling boundary
# model for factor
eps=1e-4
nr<-length(theta)
part<-vector("numeric",nr)
for (i in 1:nr){
del<-rep(0,nr)
del[i]<-eps
part[i]<-(nll_factor((theta+del),y,k,nlev)-
nll_factor(theta,y,k,nlev))/eps
}
return(part)
}
pd<-nll_factor_bound_pd(theta_guess,y,k,nlev,sigh)
scale<-1/abs(pd)
mlest<-optim(theta_guess,nll_factor_bound,method="BFGS",
y=y,k=k,nlev=nlev,sigh=sigh,
control = list(parscale = scale))
pd<-nll_factor_bound_pd(mlest$par,y,k,nlev,sigh)
scale<-1/abs(pd)
mlest2<-optim(mlest$par,nll_factor_bound,method="BFGS",
y=y,k=k,nlev=nlev,sigh=sigh,
control = list(parscale = scale),
hessian="T")
# Compute the inverse of the Hessian matrix
vcov_matrix <- solve(mlest2$hessian)
# Extract standard errors (square root of the diagonal elements)
std_errors <- sqrt(diag(vcov_matrix))
# Print the standard errors
print(std_errors)
seHessian(mlest2$hessian, hessian = FALSE, silent = FALSE)[4:6]
AIC_b<-2*(mlest2$value+2*nlev+2)
#npar = 2* nlev (bounds and means) + 2 (sd and measurement error)
AIC_b
7376.709
stripchart(log(yield_tha)~soil_fertility,method="jitter",jitter=0.1,
pch=16,col=c("darkgreen","green","blue"),cex=1,vertical=T,add=F,data=data)
lines(c(0.8,1.2),c(mlest2$par[4],mlest2$par[4]),col="red")
lines(c(1.8,2.2),c(mlest2$par[5],mlest2$par[5]),col="red")
lines(c(2.8,3.2),c(mlest2$par[6],mlest2$par[6]),col="red")
theta_nb_guess<-c(mlest$par[1:nlev],mlest$par[(2*nlev+1)])
pd<-nll_factor_pd(theta_nb_guess,y,k,nlev)
scale<-1/abs(pd)
null.est<-optim(theta_nb_guess,nll_factor,method="BFGS",
y=y,k=k,nlev=nlev,
control = list(parscale = scale))
null.est2<-optim(null.est$par,nll_factor,method="BFGS",
y=y,k=k,nlev=nlev,
control = list(parscale = scale),
hessian="T")
AIC_null<-2*(null.est2$value+nlev+1)
# 7534.236 (larger than for boundary model)
AIC_b
AIC_null
plot(data$oxplough_freq, data$yield_tha, xlab="oxplough freq", ylab="Yield", xlim = c(0,15))
plot(data$weeding_freq, data$yield_tha, xlab="Weeding freq", ylab="Yield", xlim = c(0,10))
levels(data$soil_fertility)
fertility<-vector()
for(i in 1:length(data$soil_fertility)){
if(data$soil_fertility[i] =="Poor") fertility[i] <- 1
if(data$soil_fertility[i]=="Medium") fertility[i] <- 2
if(data$soil_fertility[i]=="Good") fertility[i] <- 3
}
plot(fertility, data$yield_tha, xlab="Soil fertility status", ylab="Yield")
levels(data$soil_depth)
depth<-vector()
for(i in 1:length(data$soil_depth)){
if(data$soil_depth[i]=="Shallow") depth[i]<- 1
if(data$soil_depth[i]=="Medium") depth[i]<- 2
if(data$soil_depth[i]=="Deep") depth[i]<- 3
}
plot(depth, data$yield_tha, xlab="Soil depth", ylab="Yield")
levels(data$soil_slope)
data2<-data[-which(data$soil_slope==""),]
slope<-vector()
for(i in 1:length(data2$soil_depth)){
if(data2$soil_slope[i]=="Flat") slope[i]<- 1
if(data2$soil_slope[i]=="Medium") slope[i]<- 2
if(data2$soil_slope[i]=="Steep" ) slope[i]<- 3
#if(data2$soil_slope[i]=="") slope[i]<- 4
}
plot(slope, data2$yield_tha, xlab="slope", ylab="Yield")
setwd("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA_NETHERLAND_Rothamsted")
data <- read.csv("maize.csv")
data <- read.csv("maize_data.csv")
head(data)
setwd("C:/Users/stxcm28/OneDrive - The University of Nottingham/Desktop/BLA_NETHERLAND_Rothamsted")
