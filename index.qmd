---
title: "Boundary Line Methodology For Yield Gap Analysis"
format: html
editor: visual
author: Chawezi Miti
---

## DAY 1: INTRODUCTION TO BOUNDARY LINE ANALYSIS

## 1. Introduction

This script gives illustration of fitting boundary line models to data and carrying out post-hoc analysis.

## 2. Install and Load libraries

### 2.1 Install necessary packages

```{r, eval=FALSE}
install.packages("devtools")
library(devtools)
#install.packages("BLA")
install_github("chawezimiti/BLA") # install the development version of BLA from Github
install.packages("aplpack")
```

### 2.2 Load libraries into your `R` session

```{r, eval=FALSE}
library(BLA) 
library(aplpack)
```

## 3. Boundary line analysis task

The `BLA` package contains an inbuilt dataset called `soil` that contains data on wheat yield, soil P and soil pH gathered from farms across the UK. The task for this practical is to:

1.  Fit the boundary line model describing wheat yield as a function of soil Phosphorus and soil pH.

2.  Determine the most-limiting factor at each observation point.

NB: A second dataset called `maize` is also provided via a github that contains Maize yields, soil pH, soil K and soil N gathered from Ethiopia. This will be used for follow up practice exercises.

## 4. Test Assumptions

### 4.1. Normality check

In boundary line fitting, the independent and dependent variables should plausibly be drawn from an underlying bivariate normal distribution albeit with some censoring of the response variable. Here we check this assumption using the `summastat()` function. Lets start with the boundary line for yield as a function of soil P.

#### 4.1.1. Soil P

```{r, eval=FALSE}

summastat(soil$P) # From results, P can not be assumed to be from a normal distribution and so we try a log transformation.

summastat(log(soil$P))# The log-transformed P can be assumed to be from a normal distribution
```

#### 4.1.2 Wheat yield

```{r,eval=FALSE}
summastat(soil$yield)# Wheat yield can be assumed to be from a normal distribution
```

### 4.2. Outlier detection

The boundary line model is highly sensitive to outliers and for this reason, bivariate outliers are identified and removed from the data. This is achieved using the bagplot. The `bag` plot is a bivariate equivalent of the univariate boxplot. It is composed of a `depth median`, `bag` and `loop`. The `depth median` describes the center of the data cloud and is equivalent to the median value in the univariate boxplot, the `bag` contains 50% of the data and the `loop` contains data outside the bag which are not outliers. Here we identify and remove outliers from the dataset using the `bagplot()` function.

```{r, eval=FALSE}
dat <- data.frame(x=log(soil$P), y=soil$yield) #Input for the bagplot() is a dataframe of x and y.

dat[which(is.na(dat$x)==T),1] <- mean(dat$x,na.rm=T)
dat[which(is.na(dat$y)==T),2] <- mean(dat$y,na.rm=T)

out <- bagplot(dat,show.whiskers = F)

legend("bottomright", legend = c("Bag","Loop","Depth median", "outlier"), pch = c(15,15,8,3), col = c(adjustcolor( "#7799ff", alpha.f = 0.7), "#aaccff","red","red")) 
```

Creating a new data set without bivariate outliers i.e points in the bag and loop only.

```{r, eval=FALSE}
vals <- rbind(out$pxy.bag,out$pxy.outer)

head(vals)
```

### 4.3. Testing evidence for presence of boundary in dataset

Fitting boundary line models to data works on the assumption that data has boundary limiting structure at the upper edges. This assumption is assessed using `expl_boundary()` function. The inputs are the `x` and `y` variables.

```{r,eval=FALSE}
x <- vals[,1] 
y <- vals[,2]

expl_boundary(x=x,y=y,shells=10,simulations=1000)
```

## 5. Boundary Model Fitting Methods

### 5.1 Bolides algorithm

This method fits the boundary line using the algorithm proposed by Schnug *et al*. (1995). The `bolides()` function implements this approach. You can view the required arguments by accessing the function’s help page.

```{r, eval=FALSE}
?bolides
```

Setting the model to `model="explore"` allows us to view the selected boundary points. This enables the selection of an appropriate boundary model and sensible initial starting values for the model.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bolides(x=x,y=y,model = "explore", pch=16, col="grey")

# From the plot, it can be seen that a `"trapezium"` model will be more appropriate for this data set. 
```

The function `startValues()` can be used to determine initial start values for the proposed model. You can view the required arguments by accessing the function’s help page.

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Note

</button>

::: {#my-collapse .collapse .mt-3}
1.  All boundary fitting methods require initial starting values for the parameters of a proposed model. The initial starting values are optimized to find the parameters of the proposed model as in the `optim()` function in base `R`.

2.  Note that some computers, for the `startValues()` function to work effectively, the appearance zoom in the global options of `R` and your computer display zoom should be equal i.e.both should be at 100%.
:::
:::

```{r, eval=FALSE}
?startValues()
```

With a scatter plot active in the plot window, run the function and then use the mouse to click on the plot the boundary points that follow the proposed model structure.

```{r, eval=FALSE}

startValues("trapezium")
```

Fill the suggested initial starting values in a vector.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4,3,14,104,-22) # start values is a vector of five consists of intercept, slope, plateau yield, intercept2 and slope2. 

model1 <- bolides(x=x,y=y, start = start,model = "trapezium",
                xlab=expression("Phosphorus/ln(mg L"^-1*")"), 
                ylab=expression("Yield/ t ha"^-1), pch=16, 
                col="grey", bp_col="grey")

model1

```

The model can be used to determine maximum yields for any given value of soil P using the function `predictBL()`.

1.  What are the maximum possible yields at soil P values of 4.5, 7.4, 12.2, 20.1 and 54.5 mg/kg?

```{r, eval=FALSE}

P <- c(4.5, 7.4, 12.2, 20.1, 54.5)

P_log <- log(P)

Max_yield <- predictBL(model1, P_log) # the argument inputs are the boundary line model and the independent values (in this case P_log)

Max_yield
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 1

</button>

::: {#my-collapse .collapse .mt-3}
A link to dataset `maize` that contains maize yields and various soil properties is provided below. You can read it into your `R` session using the following code.

```{r, eval=FALSE}
maize <- read.csv("https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/maize_data.csv")

head(maize)

```

1.  Fit the boundary line model for Maize yield as a function of soil N using the `bolides()` function assigning it mod_1
:::
:::

### 5.2 Binning method

The binning method involves splitting the data into several sections along the x-axis and selecting a boundary point in each section based on a set criteria (e.g. 95$^{\rm th}$ and 99$^{\rm th}$ percentile). The `blbin()` function implements this approach. You can view the required arguments by accessing the function’s help page.

```{r, eval=FALSE}
?blbin
```

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bins <- c(min(x), max(x), (max(x)-min(x))/10)

blbin(x=x, y=y, bins=bins, model = "explore", tau=0.99, pch=16, col="grey")
```

The `"trapezium"` model will be more appropriate and the values for `start` can be determined.

```{r, eval=FALSE}
startValues("trapezium")
```

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4.75, 3.23, 13.3, 24.87,-2.95 )

model2 <- blbin(x=x,y=y, bins, start = start, model = "trapezium", 
              tau=0.99, 
              ylab=expression("t ha"^-1), 
              xlab=expression("Phosphorus/ln(mg L"^-1*")"), 
              pch=16, col="grey", bp_col="grey")

model2
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 2

</button>

::: {#my-collapse .collapse .mt-3}
A link to dataset `maize` that contains Maize yields and various soil properties is provided below. You can read it into your `R` session using the following code.

```{r, eval=FALSE}
maize <- read.csv("https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/maize_data.csv")

head(maize)

```

1.  Fit the boundary line model for Maize yield as a function of soil N using the `blbin()` function assigning it mod_2.
:::
:::

### 5.3 Quantile regression method

This method fits the boundary line model based the principle of quantile regression. The `blqr()` function implements this approach. You can view the required arguments by accessing the function’s help page.

```{r, eval=FALSE}

?blqr

```

The `blqr()` function does not have the `"explore"` option. A plot of the `x` and `y` variables can be viewed to identify the appropriate boundary model and its initial `start` values.

```{r, eval=FALSE}

plot(x,y)

```

The `"trapezium"` model will be used for this data.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

startValues("trapezium")

```

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}

start <- c(4,3,13.5,31,-4.5)

model3 <- blqr(x=x,y=y, start = start, model = "trapezium", 
               tau=0.99,
               xlab=expression("Phosphorus/ mg L"^-1),
               ylab=expression("Phosphorus/ln(mg L"^-1*")"),
               pch=16, col="grey") # may take a few seconds to ran

model3
```

The resulting model can be used to determine boundary line response for any given value of soil P using the `predictBL()` function.

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 3

</button>

::: {#my-collapse .collapse .mt-3}
1.  Use the `maize` dataset to fit the boundary line model for maize yield as function of soil N using the `blqr()` function assigning it mod_3.

2.  Predict the maximum possible maize yields for any 4 points in the dataset.
:::
:::

### 5.4 Censored bivariate normal model

This method fits the boundary line model based the principle of Milne et al. (2006). The `cbvn()` function implements this approach. You can view the required arguments by accessing the function’s help page.

```{r, eval = FALSE}
?cbvn
```

As with the `blqr()` function, `cbvn()` does not have the `"explore"` option. Therefore, a plot of the `x` and `y` variables can be viewed to identify the appropriate boundary model and its initial start values.

```{r, eval = FALSE}
plot(x,y,pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)") 
```

The `"trapezium"` model will be used for this data.

#### 5.4.1 Determination of initial starting values

The `start` values for a `"trapezium"` model in the `cbvn()` function is a vector of length 10 comprising the y-intercept, slope, plateau value, second y-intercept, second slope and data distribution properties i.e means of `x` and `y`, standard deviation of `x` and `y`, and their correlation respectively.

```{r, eval = FALSE}
startValues("trapezium") 
```

We can follow 2 options.

1.  Using single set of starting values

```{r, eval = FALSE}
start1 <- c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y))
```

2.  Using multiple sets of starting values

We determine multiple start values to avoid model sticking to a local optima solution.

```{r, eval = FALSE}
start2 <- list(
  c(4.3,3.4,13.8,32.8,-4.9,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(2.5,4.1,13.42,32,-4.8,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(3.5,3.7,13.35,47.7,-8.4,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(2.83,4.11,13.7,32.,-4.6,mean(x),mean(y),sd(x),sd(y),cor(x,y)),
  c(4.1,3.4,13.6,29,-4.1,mean(x),mean(y),sd(x),sd(y),cor(x,y))
)
```

#### 5.4.2 Determination of standard deviation of measurement error

The standard deviation of measurement error (`sigh`) is a fixed parameter for `cbvn()`. As we do not have a direct measure of `sigh`, it is determined by log-likelihood profiling. In log-likelihood profiling, the log-likelihoods of several suggested values of `sigh` are determined given the data distribution and the suggested model. The `sigh` value with the largest log-likelihood is selected. This is achieved using the `ble_profile()` function.

```{r, eval = FALSE}
sigh <- c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) # we suggest sigh values ranging from 0.3 to 1 t/ha

```

1.  Using single set of starting values

```{r, eval = FALSE}

ble_profile(data = vals, start = start1, sigh = sigh, model = "trapezium", plot = T)

# Note: This function will take a longer to run as it is evaluating each sigh value.
```

2.  Using multiple sets of starting values

```{r, eval = FALSE}
profile <- lapply(start2, function(start2) {
  
  lapply(sigh, function(sigh) {
    
    ble_profile(data = vals, start = start2, sigh = sigh, model = "trapezium", plot = F)
  })
})

# Extract log-likelihood and sigh (Merror) values from profile list

log_likelihood <- unlist(lapply(profile, function(sublist) {
  sapply(sublist, function(x) x[["log-likelihood"]])
}))

Merror<- unlist(lapply(profile, function(sublist) {
  sapply(sublist, function(x) x[["Merror"]])
}))

# The sigh with the maximum log-likelihood value

Merror[which(log_likelihood==max(log_likelihood, na.rm = T))]# profile maximized  at 0.4 t/ha



```

Plotting the log-likelihood profile for visualization

```{r, eval=FALSE}

me_profile<-data.frame(x=Merror,y=log_likelihood)
me_profile<-me_profile[order(Merror),] # ordering data from smallest to largest Merror

vec<-vector()

for(i in unique(me_profile$x)){ 
  maxy<-max(me_profile[which(me_profile$x==i),]$y, na.rm = T)
  vec<-c(vec,maxy)
}

# ploting the largest value at each Merror

par(mar=c(5,5,4,4))

plot(unique(me_profile$x),vec,pch=16, 
     xlab=expression(bold(sigma[e]*"/t ha"^-1)),
     ylab=expression(bold(log-Likelihood)),
     cex.lab=1.8, cex.axis=1.8)
lines(unique(me_profile$x),vec, lty=5, lwd=1.5) 
abline(v=Merror[which(log_likelihood==max(log_likelihood, na.rm = T))],
       lty=5, col="red", lwd=1.3) # sigh with largest log-likelihood
```

#### 5.4.3 Fitting the boundary line using cbvn model

1.  **Using single set of starting values**

```{r, eval = FALSE}

model4 <- cbvn(data=vals, start = start1, sigh=0.4, model = "trapezium",
               optim.method = "Nelder-Mead",
               xlab=expression("Phosphorus/ mg L"^-1),
               ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")
```

2.  **Using multiple sets of starting values**

The `lapply()` function is used here to allows us to loop the `cbvn()` over the different start values. The `tryCatch()` allows the loop function to continue to the next input when the function fails to converge at a given input combination.

```{r, eval = FALSE}

models <- lapply(start2, function(start2) {
  
  tryCatch(
    
    cbvn(data=vals, start = start2, sigh=0.4, model = "trapezium",
         optim.method = "Nelder-Mead",
         xlab=expression("Phosphorus/ mg L"^-1), 
         ylab=expression("Yield/ t ha"^-1), pch=16, col="grey"),
    
    error=function(e) NA) 
})


```

The solution with the smallest AIC, an output of the `cbvn()` function, is selected.

```{r, eval=FALSE}


model4 <- models[[which.min(unlist(lapply(X=models,FUN = function(a){
  
  b<-tryCatch(a$AIC[2,1],error=function(e) NA)
  return(b)})))]]

model4
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 4

</button>

::: {#my-collapse .collapse .mt-3}
1.  Use the `maize` dataset to fit the boundary line model for maize yield as function of soil N using the `cbvn()` function assigning it mod_4.

2.  Predict the maximum possible maize yields for any 4 points in the dataset.
:::
:::

### 5.4.4 Run the code for soil pH below

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Boundary line model for soil pH from the `Soil` dataset

</button>

::: {#my-collapse .collapse .mt-3}
1.  Determine the boundary line for soil pH from the `Soil` dataset (within the `BLA`) and assign it model5. Use the `sigh = 0.4`. There is no need to test for presence of boundary as it has already been established earlier using Soil P.

```{r, fig.align='center', fig.dim=c(4,4), eval=FALSE}

# 1. Test for Normality-------------------------------------------------------------------

summastat(soil$pH) 

summastat(log(soil$pH)) # transformation doesn't improve results


# 2. Identify and remove outliers --------------------------------------------------------

dat2 <- data.frame(x=soil$pH, y=soil$yield) # Input for the bagplot() 

dat2[which(is.na(dat2$x) == T),1] <- mean(dat2$x, na.rm=T) #replace missing values with mean 
dat2[which(is.na(dat2$y) == T),2] <- mean(dat2$y, na.rm=T)

out2 <- bagplot(dat2,show.whiskers = F)

vals2 <- rbind(out2$pxy.bag, out2$pxy.outer) 

# 3. Select boundary model and initial starting values------------------------------------

plot(vals2, pch=16, col="grey", xlab="soil P", ylab = "Yield (t/ha)")

startValues("lp")

X <- vals2[,1]
Y <- vals2[,2]

start2 <- c(-6.07,3.05,13.53,mean(X),mean(Y),sd(X),sd(Y),cor(X,Y))

# 4. Fit the boundary model-------------------------------------------------------------

model5 <- cbvn(data=vals2, start = start2, sigh=0.4, model = "lp",
               optim.method = "Nelder-Mead",
               xlab=expression("Soil pH"),
               ylab=expression("Yield/ t ha"^-1), pch=16, col="grey")

model5



```
:::
:::

## 6. Post-hoc analysis

### 6.1 Predicting boundary yield for each data point in our dataset

The largest expected yield for each value of soil P in our data set is estimated from the boundary line model parameters using the function `predictBL()`.

```{r, eval = FALSE}
P_data <-log(soil$P) # extracting soil P from the data set

P_data[which(is.na(P_data)==T)]<-mean(P_data,na.rm=T) # replace missing values with mean soil P value

P<-predictBL(model4,P_data) # boundary yield for soil P
```

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 5

</button>

::: {#my-collapse .collapse .mt-3}
1.  Use the results from your model5 for soil pH to predict the largest yields for each value of soil pH in the `soil` dataset. Replace the missing pH values with the mean and assign the predicted yields as pH.
:::
:::

### 6.2 Determining the most-limiting factor

One of the key advantages of boundary line analysis is its ability to identify the most limiting factor among multiple variables by comparing their boundary lines. From the predicted boundary yield using model4 and model5 for soil P and soil pH respectively, we can determine which factor, soil P or soil pH, is most-limiting.

```{r, eval = FALSE}

output <- limfactor(P, pH) 

# This produces a list of length 2, containing a vector of most-limiting factor for each point in dataset and the maximum predicted response in the dataset.

# a) Attainable yield

Attainable_yield <- output[[2]]

# b) Identified most limiting factor

Limiting_factors <- output[[1]]

head(Limiting_factors)

# Graphical plot

{barplot(prop.table(table(Limiting_factors[,2]))*100,
        ylab = "Percentage (%)",
        xlab = "Soil property",
        col = "grey",
        ylim=c(0,90))

axis(side = 1, at = seq(0, 4, by = 1), labels = FALSE, lwd = 1, col.ticks = "white")  
axis(side = 2, lwd = 1)
}

```

### 6.3 Explained and Unexplained Yield gap

```{r, eval=FALSE}

soil$yield[which(soil$yield > Attainable_yield)] <- Attainable_yield

plot(Limiting_factors$Rs, soil$yield,
     xlab="Predicted yield (t/ha)",
     ylab="Actual yield (/ha)", pch=16, col="grey")

abline(h=Limiting_factor[[2]], col="blue", lty=5, lwd=1)
lines(c(min(Limiting_factors$Rs),max(Limiting_factors$Rs)), 
c(min(Limiting_factors$Rs),max(Limiting_factors$Rs)), 
col="red", lwd=2)

legend("bottomleft",legend = c("Att yield", "1:1 line"),
       lty=c(5,1), col=c("blue", "red"), lwd=c(1, 2), cex = 0.8)


#---Exp and  Unexp

points(9,5, pch=16, col="red")

arrows(x0=c(9,9),y0=c(5,9),x1=c(9,9),y1=c(9,Attainable_yield), code = 2, lwd = 1.4, lty = 5)

text(c(8,8),c(6,11), c("Unexplained Yg", "Explained Yg"), cex=0.8)

```

## 7. Additional Material: Using your own defined model

The illustrated methods for fitting the boundary line have used the in-built models. These include the `"blm"`, `"lp"`, `"trapezium"`, `"mit"`, `"schmidt"`, `"logistic"`, `"inv-logistic"`, `"double-logistic"` and `"qd"` models. However, there are some cases where one wants to fit another model which is not part of the in-built models. The following steps will illustrate how to fit a custom model. Though this will be illustrated using the `bolides()` function, it also applies for the `blbin()`, `blqr()` and `cbvn()` functions.

Assuming that the initial data exploratory step have been done, the first step is to check the structure of the boundary points using the argument `model="explore"` in the `bolides()` function.

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
bolides(x=x,y=x,model="explore", pch=16, col="grey")
```

Lets say you want to fit a model

$$
y=\beta_0 - \beta_1(x-\beta_2)^2
$$

The model is written in form of an `R` function and the parameters should always be written in alphabetical order as ***a**, **b*** and ***c*** for a three parameter function, ***a**, **b**,**c*** and ***d*** for four parameter function and so on.

```{r}
custom_function<-function(x,a,b,c){
  y<- a - b*(x-c)^2
}
```

The next step is to suggest the initial start `start` values. These should be sensible values else the function will not converge. These should be arranges in alphabetical order as `start=c(a,b,c)`. Replace a, b and c with numeric values of your choice.

The arguments of `bolides()` function can now be added. In this case, the argument `model` while be set to `"other"`. The arguments `equation` should now be set to your custom function (`equation=custom_function`)

```{r,fig.align='center', fig.dim=c(4,4), eval=FALSE}
start<-c(13.5,3,3.3)  

model5<-bolides(vals[,1], vals[,2], start = start, model = "other",
                equation=custom_function,
                xlab=expression("Phosphorus/mg L"^-1), 
                ylab=expression("Phosphorus/ln(mg L"^-1*")"), 
                pch=16, ylim=c(3.8,14.5), col="grey",bp_col="grey")

model5
```

The parameters of the models are shown in the results. A prediction of the boundary response values for each value of *`x`* can the be done as previously shown using the `predictBL()` function.

::: card
<button class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#my-collapse">

Exercise 6

</button>

::: {#my-collapse .collapse .mt-3}
1.  From the `maize` fit the boundary line model for soil N using a custom model of your choice.
:::
:::

## DAY 2: BOUNDARY LINE EXERCISE SESSION

## 1. Yield gap analysis using the maize dataset

The link below provides access to a dataset called `maize`, which contains maize yields along with various soil properties gathered from farms in Ethiopia:

https://raw.githubusercontent.com/chawezimiti/BLA_NETHERLAND_Rothamsted/refs/heads/main/maize_data.csv

1.  Identify the most-limiting factor at each point in the data set and produce a plot showing the proportions of each limiting factor.

2.  Identify the critical values for each factor in the dataset.

## 2. Yield gap analysis using own data

If you have any other data which you would like to conduct yield gap analysis.
